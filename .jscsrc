// vim: set syntax=javascript
{
	// Requires curly braces after statements.
	"requireCurlyBraces": [],

	// Requires space before keyword.
	/*"requireSpaceBeforeKeywords": [
		"else",
		"catch"
	],*/

	// Requires space after keyword.
	"requireSpaceAfterKeywords": true,

	// Requires space before block statements (for loops, control structures).
	"requireSpaceBeforeBlockStatements": true,

	// Requires parentheses around immediately invoked function expressions.
	"requireParenthesesAroundIIFE": true,

	// Requires space before and/or after ? or : in conditional expressions.
	"requireSpacesInConditionalExpression": true,

	"requireSpacesInFunction": {
		"beforeOpeningCurlyBrace": true
	},

	// Requires space before () or {} in anonymous function expressions.
	"requireSpacesInAnonymousFunctionExpression": {
		"beforeOpeningRoundBrace": true,
		"beforeOpeningCurlyBrace": true
	},

	// Require space before () or {} in function expressions.
	"requireSpacesInNamedFunctionExpression": {
		"beforeOpeningCurlyBrace": true
	},

	// Disallows space before () or {} in function expressions.
	"requireSpacesInFunctionExpression": {
		"beforeOpeningRoundBrace": true
	},

	// Disallows space before () in call expressions.
	"disallowSpacesInCallExpression": true,

	// Disallows multiple var declaration (except for-loop).
	"disallowMultipleVarDecl": true,

	"requireBlocksOnNewline": 1,

	"disallowPaddingNewlinesInBlocks": true,

	"disallowEmptyBlocks": true,

	"disallowSpacesInsideObjectBrackets": "all",
	"disallowSpacesInsideArrayBrackets": "all",
	"disallowSpacesInsideParentheses": true,

	"disallowSpaceAfterObjectKeys": true,

	"requireSpaceBeforeObjectValues": true,

	"requireCommaBeforeLineBreak": true,

	// Requires operators to appear before line breaks and not after.
	"requireOperatorBeforeLineBreak": true,

	// Requires sticking unary operators to the right.
	"disallowSpaceAfterPrefixUnaryOperators": true,

	// Requires sticking unary operators to the left.
	"disallowSpaceBeforePostfixUnaryOperators": true,

	// Disallows sticking binary operators to the left.
	"requireSpaceBeforeBinaryOperators": true,

	// Disallows sticking binary operators to the right.
	"requireSpaceAfterBinaryOperators": true,

	// Disallows implicit type conversion.
	"disallowImplicitTypeConversion": [
		"numeric",
		"boolean",
		"binary",
		"string"
	],

	// Requires identifiers to be camelCased or UPPERCASE_WITH_UNDERSCORES
	"requireCamelCaseOrUpperCaseIdentifiers": true,

	// Disallows usage of specified keywords.
	"disallowKeywords": ["with"],

	// Disallows strings that span multiple lines without using concatenation.
	"disallowMultipleLineStrings": true,

	// Disallows multiple blank lines in a row.
	"disallowMultipleLineBreaks": true,

	// Requires lines to not contain both spaces and tabs consecutively, or
	// spaces after tabs only for alignment if "smart"
	"disallowMixedSpacesAndTabs": true,

	// Requires all lines to end on a non-whitespace character
	"disallowTrailingWhitespace": true,

	// Disallows an extra comma following the final element of an array or
	// object literal.
	"disallowTrailingComma": true,

	// Disallows placing keywords on a new line.
	"disallowKeywordsOnNewLine": ["else"],

	// Requires placing line feed at file end.
	"requireLineFeedAtFileEnd": true,

	// Requires all lines to be at most the number of characters specified
	"maximumLineLength": {
		"value": 100,
		"allowComments": true,
		"allowRegex": true
	},

	// Requires constructors to be capitalized (except for this)
	"requireCapitalizedConstructors": true,

	// Requires the variable to be the left hand operator when doing a boolean comparison
	"disallowYodaConditions": true,

	// Requires function declarations by disallowing assignment of functions
	// expressions to variables. Function expressions are allowed in all other
	// contexts, including when passed as function arguments or immediately
	// invoked. Assignment of function expressions to object members is also
	// permitted, since these can't be declared.
	//"requireFunctionDeclarations": true,

	// Disallows newline before opening curly brace of all block statements.
	"disallowNewlineBeforeBlockStatements": true,

	// Option to check line break characters
	"validateLineBreaks": "LF",

	// Requires all quote marks to be either the supplied value, or consistent if true
	"validateQuoteMarks": "'",

	// Validates indentation for switch statements and block statements
	"validateIndentation": "\t",

	// Enable validation of separators between function parameters.
	"validateParameterSeparator": ", ",

	"validateJSDoc": {
		"checkParamNames": true,
		"requireParamTypes": true
	}

}
